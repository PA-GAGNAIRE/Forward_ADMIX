//this script is still a work in progress...

initialize() {
	defineConstant("start", clock());
	defineConstant("L", Lchro);
    defineConstant("run", outputFile);
	defineConstant("path", asString("/home/pagagnaire/Documents/Flavia/gen_load/" + run + "/"));
	//defineConstant("alfa", Alfa);
    defineConstant("t", 1000);
    defineConstant("final", 2000);
    defineConstant("step", 10);
	initializeTreeSeq();
	initializeMutationRate(1e-6);
	//neutral mutation at first
	initializeMutationType("m1", 0.5, "f", 2e-4);
	m1.convertToSubstitution = F;
	m1.color = "red";
	//initializeMutationType("m2", 0.5, "f", 0);
	//m2.convertToSubstitution = F;
	//m2.color = "blue";
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(c(1e-4, 5e-5, 1e-4), c(asInteger(L/3), asInteger(2*L/3), L-1));
}


1 late() {
    //this makes the ancestry script run much faster later on
	sim.addSubpop("p1", nPop1);
	sim.addSubpop("p2", nPop2);
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	
	
}

//2000
1000 late() {
    x = sim.mutationFrequencies(p1);
	y = sim.mutationFrequencies(p2);
    z = sim.mutations.position;
    //muation frequence p1
	x1 = matrix(asFloat(x), nrow = length(sim.mutationCounts(NULL)));
	
	//Muation freq p3
	y1 = matrix(asFloat(y), nrow = length(sim.mutationCounts(NULL)));

    //Mut POS
	z1 = matrix(asFloat(z), nrow = length(sim.mutationCounts(NULL)));

    // matrix with all the data
	w = cbind(z1, x1, y1);

    gen = sim.generation;
	

    for (i in 0:(length(w)/3)){
		if (i < (length(w)/3)){
			writeFile(asString(path + "mutp1p2_"+ gen + "_"+ run), paste(w[i,]), T);}
		else {break;}
	}
    
    sim.addSubpop("p3", nPop3);
	p3.setMigrationRates(c(p1, p2), c(0.5, 0.5));
}
//2001
1001 late() {
	p3.setMigrationRates(c(p1, p2), c(0.0, 0.0));
	p1.setSubpopulationSize(0);
	p2.setSubpopulationSize(0);
}

1001: late() {
    if (sim.generation % 10 == 0){ 
        //getting mutation frequencies
        v = sim.mutationFrequencies(p3);
        v1 = matrix(asFloat(v), nrow = length(sim.mutationCounts(NULL)));
        u = sim.mutations.position;
		u1 = matrix(asFloat(u), nrow = length(sim.mutationCounts(NULL)));
        q = cbind(u1, v1);
        //path = asString("/home/pagagnaire/Documents/Flavia/gen_load/" + run + "/");
		gen = sim.generation;
        for (i in 0:(length(q)/2)){
	    	if (i < (length(q)/2)){
	    		writeFile((asString(path + "mutp3_"+ gen + "_"+ run)), paste(q[i,]), T);}
	    	else {break;}
	    }

        sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	    sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));
	    time = asString("Time Elapu1 = matrix(asFloat(u), nrow = length(sim.mutationCounts(NULL)));sed: " + (clock() - start)+ "\n\n");
	    space = "-------------\n";
        gen_pass = asString("generation " + (sim.generation) + "\n\n");
        writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
    }

}

2001 late() {
	v = sim.mutationFrequencies(p3);
    v1 = matrix(asFloat(v), nrow = length(sim.mutationCounts(NULL)));
    u = sim.mutations.position;
    u1 = matrix(asFloat(u), nrow = length(sim.mutationCounts(NULL)));
	q = cbind(u1, v1);
	gen = sim.generation;
    
    for (i in 0:(length(q)/2)){
		if (i < (length(q)/2)){
			writeFile(asString(path + "mutp3_"+ gen + "_"+ run), paste(q[i,]), T);}
		else {break;}
	}
    sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));
	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
	
	sim.simulationFinished();
	cat("Time Elapsed until the end of sim: " + (clock() - start)+ ":\n\n");
	cat("-------------\n");
	cat("finished on generation " + (sim.generation)+ ":\n\n");


}
