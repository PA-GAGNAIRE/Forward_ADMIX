initialize() {
	defineConstant("start", clock());
	defineConstant("L", Lchro);
	defineConstant("alfa", Alfa);
	initializeTreeSeq();
	initializeMutationRate(0);
	//neutral mutation at first
	initializeMutationType("m1", 0.5, "f", 0);
	m1.convertToSubstitution = F;
	m1.color = "red";
	initializeMutationType("m2", 0.5, "f", 0);
	m2.convertToSubstitution = F;
	m2.color = "blue";
	initializeGenomicElementType("g1", c(m1, m2), c(1,1));
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(c(1e-4, 1e-5, 1e-4), c(asInteger(L/3), asInteger(2*L/3), L-1));
}


1 late() {
    //this makes the ancestry script run much faster later on
	sim.addSubpop("p1", nPop1);
	sim.addSubpop("p2", nPop2);
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	
    //100 random positions along the chromosome
    loci= rdunif(100, 0, L-1);
	
	//ADD 100 MUTATIONS type M1
	for (l in 0:(length(loci)-1)) {
		p1.genomes.addNewMutation(m1, 0, asInteger(loci[l]));
	}
	
	//ADD A 100 M2 MUTATIONS AT RANDOM LOCATIONS
	//0 STANDS FOR THE selection coefficient (maybe could change to (addNewDrwanMutation))
	for (l in 0:(length(loci)-1)) {
		p2.genomes.addNewMutation(m2, 0, asInteger(loci[l]));
	}
	sim.addSubpop("p3", nPop3);
	p3.setMigrationRates(c(p1, p2), c(0.5, 0.5));
}

2 late() {
	p3.setMigrationRates(c(p1, p2), c(0.0, 0.0));
	p1.setSubpopulationSize(0);
	p2.setSubpopulationSize(0);
    z = sim.mutations.position;
	//Mut POS
	z1 = matrix(asFloat(z), nrow = length(sim.mutationCounts(NULL)));
	z1 = sort(unique(z1));
	
	for (i in z1){
		writeFile(asString(outputFile + "_positions.txt"), paste(i), T);
	}
}

10 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}



10 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}


20 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}



20 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}

30 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}



30 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}

30 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}

50 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}



50 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}

70 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}



70 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}



100 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}



100 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}

200 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}



200 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}


300 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}

300 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}

400 early(){
    ind_fit = p3.cachedFitness(NULL);
	// print(ind_fit);
		for (i in 0:(length(ind_fit) - 1)){
			if (i < (length(ind_fit))){
			writeFile(asString(outputFile + "_" + sim.generation + "_ind_fitness.txt"), paste(ind_fit[i]), T);}
		else {break;}}   

}

400 late() {
	sim.treeSeqOutput(asString(outputFile + "_" + sim.generation + ".trees"));
	sim.outputFull(asString(outputFile + "_sim_" + sim.generation + ".txt"));

	time = asString("Time Elapsed: " + (clock() - start)+ "\n\n");
	space = "-------------\n";
    gen_pass = asString("generation " + (sim.generation) + "\n\n");
    writeFile(asString(outputFile + "_time.txt"), paste(c(time, space, gen_pass)), T);
}




3:400 fitness(NULL) {
	a1 = 0;
	a2 = 0;
	a12 = 0;
    for (mt in 0:(length(genome1.mutations) - 1)){
        if ((genome1.mutations[mt].mutationType == m1) & (genome2.mutations[mt].mutationType == m1)){a1 = a1 + 1;} 
        else if ((genome1.mutations[mt].mutationType == m2) & (genome2.mutations[mt].mutationType == m2)) {a2 = a2 +1;} 
        else {a12 = a12 +1;}
    }

	tot = a1+a12+a2;
	a1=a1/tot;
	a2=a2/tot;
	a12=a12/tot;		
	h2 = a2+0.5*a12;
	h1 = a1+0.5*a12;
	f = 4*h2*(1-h2)-a12;
	return relFitness - (f*alfa);
}
